import json
import socket
import threading
from cryptography.fernet import Fernet
import time

class Client():
    def __init__(self):
        # Client Socket
        # Host Address
        # Port
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        host_address = '192.168.130.239'  # Replace this with Server IP address
        port = 12346  # Replace with server suitable port
        self.client_socket.connect((host_address, port))
        print("CONNECTED TO SERVER")
        # Receive private key
        key = self.client_socket.recv(1024)
        print("RECEIVED KEY")
        self.cipher_suite = Fernet(key)

    def send_message(self, JSON_object):
        # stringify JSON_object
        JSON_object_str = json.dumps(JSON_object)
        encrypted_message = self.cipher_suite.encrypt(JSON_object_str.encode())
        # Send the message to the server to broadcast
        self.client_socket.send(encrypted_message)


if __name__ == '__main__':
    client = Client()
    pose_loop = [[1000,200, 90], [1000,210, 90], [1000,220, 90], [1000,230, 90], 
                 [1000,240, 90], [1000,250, 90], [1000,260, 90], [1000,270, 90],
                 [1000,280, 90], [1000,290, 90], [1000,300, 90], [1000,310, 90],
                 [1000,320, 90], [1000,330, 90], [1000,340, 90], [1000,350, 90],
                 [1000,360, 90], [1000,370, 90], [1000,380, 90], [1000,390, 90],
                 [1000,400, 90], [1000,410, 90], [1000,420, 90], [1000,430, 90],
                 [1000,440, 90], [1000,450, 90], [1000,460, 90], [1000,470, 90],
                 [1000,480, 90], [1000,490, 90], [1000,500, 90], [1000,510, 90],
                 [1000,500, 90], [1000,510, 90], [1000,520, 90], [1000,530, 90],
                 [1000,540, 90], [1000,550, 90], [1000,560, 90], [1000,570, 90],
                 [1000,580, 90], [1000,590, 90], [1000,600, 90], [1000,610, 90],
                 [1000,620, 90], [1000,630, 90], [1000,640, 90], [1000,650, 90], 
                 [1000,660, 90], [1000,670, 90], [1000,680, 90], [1000,690, 90],
                 [1000,700, 90], [1000,710, 90], [1000,720, 90], [1000,730, 90],
                 [1000,740, 90], [1000,750, 90], [1000,760, 90], [1000,770, 90],
                 [1000,780, 90], [1000,790, 90],
                 [1000,800, 90], [1000,810, 90], [1000,820, 90], [1000,830, 90],
                 [1000,840, 90], [1000,850, 90], [1000,860, 90], [1000,870, 90],
                 [1000,880, 90], [1000,890, 90],
                 [1000,900, 90], [1000,910, 90], [1000,920, 90], [1000,930, 90],
                 [1000,940, 90], [1000,950, 90], [1000,960, 90], [1000,970, 90],
                 [1000,980, 90], [1000,990, 90], [1000,1000, 90],
                 [990, 1000, 180], [980, 1000, 180], [970, 1000, 180], [960, 1000, 180],
                 [950, 1000, 180], [940, 1000, 180], [930, 1000, 180], [920, 1000, 180], 
                 [910, 1000, 180], [900, 1000, 180],
                 [890, 1000, 180], [880, 1000, 180], [870, 1000, 180], [860, 1000, 180],
                 [850, 1000, 180], [840, 1000, 180], [830, 1000, 180], [820, 1000, 180], 
                 [810, 1000, 180], [800, 1000, 180],
                 [790, 1000, 180], [780, 1000, 180], [770, 1000, 180], [760, 1000, 180],
                 [750, 1000, 180], [740, 1000, 180], [730, 1000, 180], [720, 1000, 180], 
                 [710, 1000, 180], [700, 1000, 180],
                 [690, 1000, 180], [680, 1000, 180], [670, 1000, 180], [660, 1000, 180],
                 [650, 1000, 180], [640, 1000, 180], [630, 1000, 180], [620, 1000, 180], 
                 [610, 1000, 180], [600, 1000, 180],
                 [600, 990, -90], [600, 980, -90], [600, 970, -90], [600, 960, -90], [600, 950, -90],
                 [600, 940, -90], [600, 930, -90], [600, 920, -90], [600, 910, -90], [600, 900, -90],
                 [600, 890, -90], [600, 880, -90], [600, 870, -90], [600, 860, -90], [600, 850, -90],
                 [600, 840, -90], [600, 830, -90], [600, 820, -90], [600, 810, -90], [600, 800, -90],
                 [600, 790, -90], [600, 780, -90], [600, 770, -90], [600, 760, -90], [600, 750, -90],
                 [600, 740, -90], [600, 730, -90], [600, 720, -90], [600, 710, -90], [600, 700, -90],
                 [600, 690, -90], [600, 680, -90], [600, 670, -90], [600, 660, -90], [600, 650, -90],
                 [600, 640, -90], [600, 630, -90], [600, 620, -90], [600, 610, -90], [600, 600, -90],
                 [600, 590, -90], [600, 580, -90], [600, 570, -90], [600, 560, -90], [600, 550, -90],
                 [600, 540, -90], [600, 530, -90], [600, 520, -90], [600, 510, -90], [600, 500, -90],
                 [600, 490, -90], [600, 480, -90], [600, 470, -90], [600, 460, -90], [600, 450, -90],
                 [600, 440, -90], [600, 430, -90], [600, 420, -90], [600, 410, -90], [600, 400, -90],
                 [600, 390, -90], [600, 380, -90], [600, 370, -90], [600, 360, -90], [600, 350, -90],
                 [600, 340, -90], [600, 330, -90], [600, 320, -90], [600, 310, -90], [600, 300, -90],
                 [600, 290, -90], [600, 280, -90], [600, 270, -90], [600, 260, -90], [600, 250, -90],
                 [600, 240, -90], [600, 230, -90], [600, 220, -90], [600, 210, -90], [600, 200, -90],
                 [610, 200, 0], [620, 200, 0], [630, 200, 0], [640, 200, 0], [650, 200, 0],
                 [660, 200, 0], [670, 200, 0], [680, 200, 0], [690, 200, 0], [700, 200, 0],
                 [710, 200, 0], [720, 200, 0], [730, 200, 0], [740, 200, 0], [750, 200, 0],
                 [760, 200, 0], [770, 200, 0], [780, 200, 0], [790, 200, 0], [800, 200, 0],
                 [810, 200, 0], [820, 200, 0], [830, 200, 0], [840, 200, 0], [850, 200, 0],
                 [860, 200, 0], [870, 200, 0], [880, 200, 0], [890, 200, 0], [800, 200, 0],
                 [910, 200, 0], [920, 200, 0], [930, 200, 0], [940, 200, 0], [950, 200, 0],
                 [960, 200, 0], [970, 200, 0], [980, 200, 0], [990, 200, 0], [1000, 200, 0],
                 ]
    
    start_time = time.time()
    count = 0
    n = len(pose_loop)
    while True:
        curr_time = time.time()
        if curr_time - start_time >= 0.1:
            start_time = curr_time

            JSON_object = {"pose": pose_loop[count], "goal": None}
            client.send_message(JSON_object)

            count += 1
            if count == n:
                count = 0
    '''
    JSON_object = {"robot_id": x, "location": x, "status": x, "bin": x, "path": x}
    # Robot ID -
    # Location - [x, y]
    # Status - "Loading", "Unloading", "Moving", "Idle"
    # Bin - 1, 2, 3
    # Current Path - [[x, y]...]
    '''
